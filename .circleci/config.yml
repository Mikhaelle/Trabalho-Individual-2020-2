orbs: # declare what orbs we are going to use
  node: circleci/node@2.0.2 # the node orb provides common node-related configuration
version: 2.1
defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: circleci/python:3.6.4
      environment:
        DATABASE_URL: postgresql://myuser@localhost:5432/circle_test
    - image: circleci/postgres:12
      environment:
        POSTGRES_DB: circle_test
        POSTGRES_USER: myuser
        POSTGRES_PASSWORD: password
jobs:
  build:
    <<: *defaults
    steps:
      - run:
          name:  Download cc-test-reporter
          command: |
            mkdir -p tmp/
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
            chmod +x ./tmp/cc-test-reporter
            ./tmp/cc-test-reporter before-build
      - persist_to_workspace:
          root: tmp
          paths:
            - cc-test-reporter
  backend:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Install python dependencies
          command: |
            sudo apt-get update
            sudo apt-get install python-pip python-dev libpq-dev postgresql postgresql-contrib
            pip3 install virtualenv
            virtualenv env
            . env/bin/activate
            pip install djangorestframework psycopg2 django-cors-headers
      - run:
          name: Setup the database
          command: psql -h localhost -p 5432 -U myuser -d circle_test -a -f schema.sql
      - run:
          name: backend-tests
          command: |
            . env/bin/activate
            cd api/
            python3 manage.py test
  frontend:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/tmp
      - node/install:
          node-version: 12.16.2
      - run:
          name: Install app dependencies
          command: |
            cd client/
            npm install
      - run:
          name: frontend-tests
          command: |
            cd client/
            npm run test:unit:coverage
      - run:
          name: add coverage
          command: |
            cd client/test/jest
            ./tmp/cc-test-reporter after-build -t lcov
      - store_test_results:
          path: client/test/jest/coverage/
      - store_artifacts: # upload test coverage as artifact
          path: client/test/jest/coverage/lcov.info
  upload-coverage:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo/tmp
      - run:
          name: Upload coverage results to Code Climate
          command: |
            ./tmp/cc-test-reporter sum-coverage tmp/codeclimate.*.json -p 2 -o tmp/codeclimate.total.json
            ./tmp/cc-test-reporter upload-coverage -i tmp/codeclimate.total.json

workflows:
  version: 2

  commit:
    jobs:
      - build
      - backend:
          requires:
            - build
      - frontend: 
          requires: 
             - build
      - upload-coverage:
          requires:
             - backend
             - frontend